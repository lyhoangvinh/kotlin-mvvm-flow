apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'dagger.hilt.android.plugin'

apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion buildConfig.compileSdk
    buildToolsVersion buildConfig.tools
    defaultConfig {
        applicationId buildConfig.id
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode buildConfig.version.code
        versionName buildConfig.version.name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        debug {
            buildConfigField "String", "COMIC_ENDPOINT", (project.findProperty("COMIC_ENDPOINT") ?: "")
            buildConfigField "String", "AVGLE_ENDPOINT", (project.findProperty("AVGLE_ENDPOINT") ?: "")
            buildConfigField "String", "HEADER_AUTH", "\"Authorization\""
            buildConfigField "boolean", "ENABLE_LOGCAT", "true"
            buildConfigField "String", "API_KEY", (project.findProperty("API_KEY") ?: "")
            archivesBaseName = "mvvmarchitecture-app-$defaultConfig.versionName($defaultConfig.versionCode)"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "COMIC_ENDPOINT", (project.findProperty("COMIC_ENDPOINT") ?: "")
            buildConfigField "String", "AVGLE_ENDPOINT", (project.findProperty("AVGLE_ENDPOINT") ?: "")
            buildConfigField "boolean", "ENABLE_LOGCAT", "false"
            buildConfigField "String", "HEADER_AUTH", "\"Authorization\""
            buildConfigField "String", "API_KEY", (project.findProperty("API_KEY") ?: "")
            archivesBaseName = "mvvmarchitecture-app-$defaultConfig.versionName($defaultConfig.versionCode)"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()

    dataBinding {
        enabled = true
    }

    androidExtensions {
        experimental = true
    }

    kapt {
        correctErrorTypes = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    implementation rootProject.kotlinStdlib
    implementation rootProject.supportConstraint
    implementation rootProject.multidex
    implementation rootProject.material
    implementation rootProject.androidxSupportLegacy
    implementation rootProject.androidxSupportRecyclerview
    implementation rootProject.androidxSupportAppcompat
    implementation rootProject.androidxSupportCardview
    implementation rootProject.androidxSupportFragment
    implementation rootProject.androidxSupportVectordrawable
    implementation rootProject.androidxSupportVectordrawableAnimated
    implementation rootProject.androidxSupportViewpager2

    //lifecycle
    implementation rootProject.lifecycleExtensions
    implementation rootProject.lifecycleRuntime
    implementation rootProject.lifecycleViewmodel
    implementation rootProject.lifecycleLivedata

    implementation rootProject.core
    implementation rootProject.coreKtx


    implementation rootProject.coroutinesCore
    implementation rootProject.coroutinesAndroid
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.7")

    implementation rootProject.sandwich

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.espressoVersion"

    //room
    implementation rootProject.room
    annotationProcessor "androidx.room:room-compiler:$roomDatabaseVersion"
    implementation rootProject.roomCoroutine
    kapt rootProject.roomCompiler

    // retrofit
    implementation rootProject.retrofit
    implementation rootProject.retrofitGsonConverter
    implementation rootProject.retrofit2Converter
    implementation rootProject.okhttp
    implementation rootProject.okhttpLoggingInterceptor

    //dagger hilt
    implementation rootProject.dagger
    kapt rootProject.daggerCompiler
    kapt rootProject.daggerHiltCompiler

    //picasso
    implementation "com.squareup.picasso:picasso:$rootProject.ext.picassoVersion"
    implementation 'jp.wasabeef:picasso-transformations:2.2.1'

    //paging
    implementation rootProject.paging
    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common-ktx:$rootProject.ext.pagingVersion"
  
    // navigation
    // https://developer.android.com/jetpack/androidx/releases/navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.ext.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.ext.navigationVersion"
    // Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$rootProject.ext.navigationVersion"

    implementation "androidx.navigation:navigation-fragment:$rootProject.ext.navigationVersion"
    implementation "androidx.navigation:navigation-ui:$rootProject.ext.navigationVersion"

    //ultraviewpager
    implementation('com.alibaba.android:ultraviewpager:1.0.7.7@aar') {
        transitive = true
    }

    //my util
    implementation "com.github.lyhoangvinh:myutil:$rootProject.ext.myutilVersion"

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation project(':domain')
    implementation project(':data')
}
